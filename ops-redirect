#!/bin/bash

##
# Redirect incoming traffic from one [IP:]port to another
##

# set -x
set -e

_src=""
_dest=""
_iface=""
_proto="tcp"
_save=""
_help=""

_comment="OPS-REDIRECT %s"

_redirect() {
  local src_addr="${_src%:*}"
  local src_port="${_src##*:}"
  local line="$(sudo iptables -t nat -v -L --line-numbers |
    grep -F "${_comment}" | cut -d ' ' -f 1)"
  local opts=()

  if [[ "${line}" ]]; then
    opts+=("-R PREROUTING ${line}")
  else
    opts+=("-I PREROUTING")
  fi

  if [[ "${_iface}" ]]; then
    opts+=("-i ${_iface}")
  fi

  if [[ "${src_addr}" != "${src_port}" ]]; then
    opts+=("-d ${src_addr}")
  fi

  sudo iptables -t nat \
    ${opts[@]} \
    -p ${_proto} \
    --dport ${src_port} \
    -m comment --comment "${_comment}" \
    -j DNAT \
    --to-destination ${_dest}
}

_save() {
  local rules_v4="/etc/iptables/rules.v4"
  local rules_v4_tmp="/tmp/iptables-rules.v4"

  if [[ ! -f "${rules_v4}" ]]; then
    echo "No iptables-persistent rules found, unable to persist"
    return 1
  fi

  local line="$(grep -nF "${_comment}" "${rules_v4}" | cut -d ':' -f 1)"
  local rule="$(sudo iptables-save | grep -F "${_comment}")"
  local op='replace'

  if [[ -z "${line}" ]]; then
    line="$(grep -nF "*nat" "${rules_v4}" | cut -d ':' -f 1)"

    if [[ "${line}" ]]; then
      op="insert"

      local n=0
      local _rule
      while read _rule; do
        if [[ ! "${_rule}" =~ ^[*:] ]]; then
          line=$((line + n))
          break
        fi

        n=$((n + 1))
      done < <(tail -n +${line} "${rules_v4}")
    fi
  fi

  if [[ -z "${line}" ]]; then
    op="create"
  fi

  case "${op}" in
    # Rule exists
    replace)
      sed "${line}s/.*/${rule}/" "${rules_v4}" > "${rules_v4_tmp}"
      ;;

    # No rule declared
    insert)
      sed "${line}i ${rule}" "${rules_v4}" > "${rules_v4_tmp}"
      ;;

    # No chain declared
    create)
      echo -e "# Generated by ops-redirect\n*nat\n${rule}\nCOMMIT" \
        >> "${rules_v4_tmp}"
      ;;
  esac

  cp -f "${rules_v4_tmp}" "${rules_v4}"
  rm "${rules_v4_tmp}"
}

_print_help() {
  echo "\
Redirect incoming traffic from one [IP:]port to another

Usage: $0 [options] <src> <dest>

Options:
  -i, --iface name       Source interface name, any if omitted
  -p, --proto {tcp|udp}  Protocol to match, "tcp" if omitted
  -s, --save             Save rules to persistent config
  -h, --help             Print help and exit\
  "
}

_parse_args() {
  until [[ -z "$@" ]]; do
    case "$@" in
     -i*|--iface*)
        if [[ "$2" ]]; then
          _iface="$2"
          shift
        fi
        shift
        ;;

      -p*|--proto*)
        if [[ "$2" ]]; then
          _proto="$2"
          shift
        fi
        shift
        ;;

      -s*|--save*)
        _save=true
        shift
        ;;

      -h*|--help*)
        _help=true
        shift
        ;;

      [!-]*)
        if [[ "$2" ]]; then
          _src="$1"
        else
          _dest="$1"
        fi
        shift
        ;;

      *)
        shift
        ;;
    esac
  done
}

main() {
  _parse_args "$@"

  if [[ "${_help}" || -z "${_src}" || -z "${_dest}" ]]; then
    _print_help
    return 1
  fi

  if [[ ! "${_proto}" =~ ^(tcp|udp)$ ]]; then
    echo "Protocol should be tcp or udp: -p ${_proto}"
    return 1
  fi

  _comment="$(printf "${_comment}" "${_src}")"

  _redirect

  if [[ "${_save}" ]]; then
    _save
  fi
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  main "$@"
fi
